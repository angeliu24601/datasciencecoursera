left <- (avg.new - avg.old) - error
right <- (avg.new - avg.old) + error
se <- sqrt((var.new*(s-1) + var.old*(s-1))/(s+s-2))
error <- qt(0.975, df = s+s-2)*se
left <- (avg.new - avg.old) - error
right <- (avg.new - avg.old) + error
s <- 10; avg.new <- 3; var.new <- 0.6; avg.old <- 5; var.old <- 0.68
se <- sqrt((var.new*(s-1) + var.old*(s-1))/(s+s-2))
error <- qt(0.975, df = s+s-2)*se*(1/(s-1) + 1/(s-1))^0.5
left <- (avg.new - avg.old) - error
right <- (avg.new - avg.old) + error
rm(lists=ls())
rm(list=ls())
s <- 9; avg <- 1100; sd <- 30
ans1 <- avg + c(1, -1)*qt(0.025, s-1)*sd/sqrt(s)
ans <- list(ans1 = ans1)
rm(list = setdiff(ls(), c("ans")))
s <- 9; avg <- -2;
ans2 <- avg/qt(0.025, s-1)*sqrt(s)
ans <- c(ans, ans2 = ans2)
rm(list = setdiff(ls(), c("ans")))
ans <- c(ans,
ans3 = "A paired interval")
s <- 10; avg.new <- 3; var.new <- 0.6; avg.old <- 5; var.old <- 0.68
error <- qt(0.975, df = s+s-2)*se
s <- 10; avg.new <- 3; var.new <- 0.6; avg.old <- 5; var.old <- 0.68
se <- sqrt((var.new*(s-1) + var.old*(s-1))/(s+s-2))
error <- qt(0.975, df = s+s-2)*se
ans4 <- avg.new - avg.old + c(-1, 1)*error
se <- sqrt(var.new/s + var.old/s)
error <- qt(0.975, df = s+s-2)*se
ans4 <- avg.new - avg.old + c(-1, 1)*error
ans <- c(ans, ans4 = ans4)
ans
ans4
ans <- c(ans, ans4 = list(ans4))
ans[c(4,5)] <- NULL
rm(list = setdiff(ls(), c("ans"))
rm(list = setdiff(ls(), c("ans")))
?qt
ans <- c(ans,
ans5 = "The interval will be narrower")
s <- 100; avg.new <- 4; sd.new <- 0.5; avg.old <- 6; sd.old <- 2
se <- sqrt(sd.new*sd.new/s + sd.old*sd.old/s)
#df <- (sd.new^2 + sd.old^2)^2 / ((sd.new^2/s)^2/(s-1) + (sd.old^2/s)^2/(s-1) )
error <- qnorm(0.975)*se
left <- (avg.old - avg.new) - error
right <- (avg.old - avg.new) + error
ans <- c(ans, ans6 = list(c(left, right)))
rm(list = setdiff(ls(), c("ans")))
s <- 9;diff.tr <- -3;diff.pl <- 1; sd.tr <- 1.5; sd.pl <- 1.8
se <- sqrt(sd.tr^2/s + sd.pl^2/s)
error <- qt(0.95, df = 2*s-2)*se
ans7 <- diff.tr - diff.pl + c(-1, 1)*error
ans <- c(ans, ans4 = list(ans7))
rm(list = setdiff(ls(), c("ans")))
rm(ans)
?t.test
baseline <- c(140, 138, 150, 148, 135)
week2 <- c(132, 135, 151, 146, 130)
t.test(baseline, week2, paired = T)
x <- t.test(baseline, week2, paired = T)
x <- t.test(baseline, week2, paired = T)[p.value]
x <- t.test(baseline, week2, paired = T)[3]
ans1 <- t.test(baseline, week2, paired = T)[3]
rm(x)
ans1 <- t.test(baseline, week2, paired = T)$p.value
ans <- list(ans1 = ans1)
rm(list = setdiff(ls(), "ans"))
avg <- 1100; sd <- 30
avg <- 1100; sd <- 30; s <- 9
ans2 <- avg + c(1, -1)*qt(0.025, s-1)*sd/sqrt(s)
ans <- list(ans2 = ans2)
rm(list = setdiff(ls(), "ans"))
baseline <- c(140, 138, 150, 148, 135)
week2 <- c(132, 135, 151, 146, 130)
ans1 <- t.test(baseline, week2, paired = T)$p.value
ans <- list(ans1 = ans1)
rm(list = setdiff(ls(), "ans"))
avg <- 1100; sd <- 30; s <- 9
ans2 <- avg + c(1, -1)*qt(0.025, s-1)*sd/sqrt(s)
ans <- list(ans, ans2 = ans2)
baseline <- c(140, 138, 150, 148, 135)
week2 <- c(132, 135, 151, 146, 130)
ans1 <- t.test(baseline, week2, paired = T)$p.value
ans <- list(ans1 = ans1)
rm(list = setdiff(ls(), "ans"))
avg <- 1100; sd <- 30; s <- 9
ans2 <- avg + c(1, -1)*qt(0.025, s-1)*sd/sqrt(s)
ans <- c(ans, ans2 = ans2)
rm(list = setdiff(ls(), "ans"))
ans <- c(ans, ans2 = list(ans2))
avg <- 1100; sd <- 30; s <- 9
ans2 <- avg + c(1, -1)*qt(0.025, s-1)*sd/sqrt(s)
ans <- c(ans, ans2 = list(ans2))
rm(list = setdiff(ls(), "ans"))
ans[c(3,2)] <- NULL
setwd("./assignments")
ans3 <- binom.test(x = 3, n = 4)
ans3 <- binom.test(x = 3, n = 4)$p.value
ans <- c(ans, ans3 = list(ans3))
rm(list = setdiff(ls(), "ans"))
ans4 <-ppois(1787-1, 1, lower.tail = FALSE)
ans4 <-ppois(9, 1787*0.01, lower.tail = FALSE)
ans4 <-ppois(9, 1787*0.01, lower.tail = TRUE)
ans4 <-ppois(10, 1787*0.01, lower.tail = TRUE)
?ppois
ans4 <-ppois(10, 1787*0.01, lower.tail = TRUE)
ans4 <-ppois(9, 1787*0.01, lower.tail = TRUE)
?poisson.test()
ans4 <-poisson.test(10, 1787*0.01, alternative = "less")
ans4 <-poisson.test(10, 1787, 1/100, alternative = "less")
ans4 <-poisson.test(10, 1787, 1/100, alternative = "less")$p.value
ans <- c(ans, ans4 = list(ans4))
rm(list = setdiff(ls(), "ans"))
avg.tr <- -3; avg.pl <- 1; sd.tr <- 1.5; sd.pl <- 1.8
s <- 9;avg.tr <- -3; avg.pl <- 1; sd.tr <- 1.5; sd.pl <- 1.8
error <- sqrt(sd.tr^2/s + sd.pl^2/s)
?pt
se <- sqrt(sd.tr^2/s + sd.pl^2/s)
rm(error)
p <- (avg.tr - avg.pl)/se
p <- pt((avg.tr - avg.pl)/se, df = 2*s - 2)
tstatis <- (avg.tr - avg.pl)/se
pt(tstatis, df = 2*s - 2)
dt(tstatis, df = 2*s - 2)
p
options("scipen" = 100, "digits"=4)
p
avg.tr - avg.pl
tstatis <- (avg.tr - avg.pl)/se
pt(tstatis, df = 2*s - 2)
ans <- c(ans, ans5 = "Less than 0.01")
rm(list = setdiff(ls(), "ans"))
ans <- c(ans, ans6 = "No you would not reject")
mu0 <- 0; mua <- 0.01; n <- 100; sd <- 0.04
qnorm(1-alpha)
mu0 <- 0; mua <- 0.01; n <- 100; sd <- 0.04; alpha <- 0.05
z <- qnorm(1 - alpha)
pnorm(mua + z*sd, mean = mua, sd = sd, lower.tail = FALSE)
rm(mu0)
rm(alpha)
mua <- 0.01; n <- 100; sd <- 0.04; p <- 0.05
ans7 <- power.t.test(n, delta = mua, sd = sd,
sig.level = p, type="one.sample", alt="one.sided")$power
ans <- c(ans, ans7 = ans7)
rm(list = setdiff(ls(), "ans"))
ans8 <- power.t.test(power = pow, delta = mua,
sd = sd, sig.level = p, type = "one.sample", alt = "one.sided")$n
mua <- 0.01; sd <- 0.04; p <- 0.05; pow <- 0.9
ans8 <- power.t.test(power = pow, delta = mua,
sd = sd, sig.level = p, type = "one.sample", alt = "one.sided")$n
ans <- c(ans, ans8 = ans8)
rm(list = setdiff(ls(), "ans"))
ans <- c(ans, ans9 = "You will get larger power.")
ans3 <- binom.test(x = 3, n = 4, alternative = "greater")$p.value #Approach it as a binomial test
ans <- c(ans, ans3 = list(ans3))
rm(list = setdiff(ls(), "ans"))
ans[3] <- NULL
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
?rexp
set.seed(500)
exp <- NULL
for (i in 1:1000) {exp <- rbind(exp, rexp(40,rate=0.2))}
theo_mean <- 1/0.2
exp_mean <- apply(exp,1, mean)
sample_mean <- mean(exp_mean)
print(cbind(theo_mean,sample_mean))
set.seed(17)
exp <- NULL
for (i in 1:1000) {exp <- rbind(exp, rexp(40,rate=0.2))}
theo_mean <- 1/0.2
exp_mean <- apply(exp,1, mean)
sample_mean <- mean(exp_mean)
print(cbind(theo_mean,sample_mean))
library(ggplot2)
p1 <- ggplot(data = exp_mean, aes()) + geom_histogram()
head(exp)
?apply
exp_mean <- as.data.frame(ex_mean)
exp_mean <- as.data.frame(exp_mean)
p1 <- ggplot(data = exp_mean, aes()) + geom_histogram()
p1
p1 <- ggplot(data = exp_mean, aes()) + geom_density()
p1
View(exp_mean)
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) + geom_density()
p1
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) + geom_histogram()
p1
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) + geom_histogram() +
geom_line(theo_mean, color = "red") + geo_line(sample_mean, color = "blue")
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) + geom_histogram() +
geom_line(theo_mean, aes(color = "red")) +
geo_line(sample_mean, aes(color = "blue"))
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) + geom_histogram() +
geom_line(theo_mean, aes(color = "red")) +
geom_line(sample_mean, aes(color = "blue"))
class(theo_mean)
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) +
geom_histogram() +
geom_line(x = theo_mean, color = "red") +
geom_line(x = sample_mean, color = "blue"
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) +
geom_histogram() +
geom_line(x = theo_mean, color = "red") +
geom_line(x = sample_mean, color = "blue")
p1
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) +
geom_histogram(aes(y = ..density..)) +
geom_line(x = theo_mean, color = "red") +
geom_line(x = sample_mean, color = "blue")
p1
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) +
geom_histogram(aes(y = ..density..)) +
geom_line(y = theo_mean, color = "red")
p1
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) +
geom_histogram(alpha = 0.2, binwidth=0.05,
colour="white", aes(y = ..density..)) +
geom_vline(xintercept=theo_mean, colour="red") +
geom_vline(xintercept=sample_mean, colour="blue") +
labs(x = "Means of each simulation", y = "Density") +
scale_x_continuous(breaks=c(3,4,5,6,7,8)) +
ggtitle("Sample Mean vs. Theoretical Mean")
p1
library(ggplot2)
exp_mean <- as.data.frame(exp_mean)
p1 <- ggplot(data = exp_mean, aes(x = exp_mean)) +
geom_histogram(alpha = 0.2, binwidth=0.05,
colour="white", aes(y = ..density..)) +
geom_vline(xintercept=theo_mean, colour="red") +
geom_vline(xintercept=sample_mean, colour="blue") +
labs(x = "Means of each simulation", y = "Density") +
scale_x_continuous(breaks=c(3,4,5,6,7,8)) +
ggtitle("Sample Mean vs. Theoretical Mean")
theo_var <- (1/0.2)^2
exp_var <- apply(exp,1,var)
sample_var <- mean(exp_var)
print(cbind(theo_var,sample_var))
View(exp_mean)
View(exp)
library(gridExtra)
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
labs(x="Distribution of sample means")
g_exp <- ggplot() + aes(x = as.vector(exp)) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
labs(x="Distribution of exponentials")
grid.arrange(g_exp, g_mns,nrow=1)
library(ggplot2);library(gridExtra)
install.packages(gridExtra)
install.packages("gridExtra")
library(ggplot2);library(gridExtra)
library(gridExtra)
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
labs(x="Distribution of sample means")
g_exp <- ggplot() + aes(x = as.vector(exp)) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
labs(x="Distribution of exponentials")
grid.arrange(g_exp, g_mns,nrow=1)
g_mns <- ggplot() + aes(x = exp_mean) +
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, args=list(mean=theo_mean, sd=sqrt(theo_var))) +
labs(x="Distribution of sample means")
g_exp <- ggplot() + aes(x = as.vector(exp)) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
labs(x="Distribution of exponentials")
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, args=list(mean=theo_mean, sd=sqrt(theo_var))) +
labs(x="Distribution of sample means")
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, color = "red"
args=list(mean=theo_mean, sd=sqrt(theo_var))) +
labs(x="Distribution of sample means")
g_mns
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, color = "red"
args=list(mean=theo_mean, sd=sqrt(theo_var))) +
labs(x="Distribution of sample means")
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, color = "red"
args=list(mean=theo_mean, sd=sqrt(theo_var))) +
labs(x="Distribution of sample means")
g_exp <- ggplot() + aes(x = as.vector(exp)) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
labs(x="Distribution of exponentials")
grid.arrange(g_exp, g_mns,nrow=1)
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, color = "red",
args=list(mean=theo_mean, sd=sqrt(theo_var))) +
labs(x="Distribution of sample means")
g_mns
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, color = "red",
args=list(mean=mean(exp_mean), sd=sd(exp_mean))) +
labs(x="Distribution of sample means")
View(exp_mean)
g_mns <- ggplot() + aes(x = exp_mean) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="white", aes(y = ..density..)) +
stat_function(fun=dnorm, color = "red",
args=list(mean=mean(exp_mean$exp_mean),
sd=sd(exp_mean$exp_mean))) +
labs(x="Distribution of sample means")
g_mns
g_exp <- ggplot() + aes(x = as.vector(exp)) +
geom_histogram(alpha = 0.2, binwidth=0.05,
color="gray", aes(y = ..density..)) +
stat_function(fun=dnorm, color = "red",
args=list(mean=mean(exp),
sd=sd(exp))) +
labs(x="Distribution of exponentials")
g_exp
rm(list=ls())
getwd()
setwd("./assignment/pa1")
setwd("./assignments/pa1")
setwd("./")
getwd()
setwd("/Users/aliu-2011/Downloads/OneDrive - Inter-American Development Bank Group/ForMe/Coursera_DataScience/06_Statistical-Inference")
getwd()
data(ToothGrowth)
summary(ToothGrowth)
str(ToothGrowth)
setwd("./pa2")
setwd("./assignments/pa2")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data(ToothGrowth)
g <- ggplot(ToothGrowth, aes(x=dose, y=len, colour=supp)) +
geom_point(shape=1) + geom_smooth(method=lm)
g
t.test(len ~ supp,data=ToothGrowth)
test1 <- t.test(len ~ supp,data=ToothGrowth)
test1$p.value
test1$conf.int
test1$conf.int
test1$conf.int$value
a <- test1$conf.int
rm(a)
test2 <- t.test(len ~ dose,data=ToothGrowth)
test2
dose12 <- subset(ToothGrowth, dose %in% c(0.5, 1.0))
dose13 <- subset(ToothGrowth, dose %in% c(0.5, 2.0))
dose23 <- subset(ToothGrowth, dose %in% c(1.0, 2.0))
test2a <- t.test(len ~ dose12,data=ToothGrowth)
test2b <- t.test(len ~ dose13,data=ToothGrowth)
test2c <- t.test(len ~ dose23,data=ToothGrowth)
test2a <- t.test(len ~ dose, data=dose12 )
test2b <- t.test(len ~ dose, data=dose13)
test2c <- t.test(len ~ dose, data=dose23)
test2 <- as.data.frame(c(test2a$p.value, test2b$p.value, test2c$p.value),
row.names = c("test2a", "test2a", "test2a"))
View(test2)
?as.data.frame
as.matrix()
?as.matrix
?xtable
test2 <- as.list(c(test2a$p.value, test2b$p.value, test2c$p.value))
test2
test2 <- as.list(test2a = c(test2a$p.value, test2a$conf.int),
test2b = c(test2b$p.value, test2b$conf.int),
test2c = c(test2c$p.value, test2c$conf.int))
as.list()
?as.list()
test2 <- list(test2a = c(test2a$p.value, test2a$conf.int),
test2b = c(test2b$p.value, test2b$conf.int),
test2c = c(test2c$p.value, test2c$conf.int))
test2
test2 <- list(test2a = list(p.value = test2a$p.value,
confidence.interval = test2a$conf.int),
test2b = list(p.value = test2b$p.value,
confidence.interval = test2b$conf.int),
test2c = list(p.value = test2c$p.value,
confidence.interval = test2c$conf.int))
test2
?options()
options(scipen = 999)
test2
as.matrix
?as.matrix
test2 <- matrix(c(test2a$p.value, test2b$p.value, test2c$p.value,
test2a$conf.int, test2a$conf.int, test2a$conf.int),
nrow = 3, ncol = 2)
test2 <- matrix(c(test2a$p.value, test2b$p.value, test2c$p.value,
test2a$conf.int, test2a$conf.int, test2a$conf.int),
nrow = 3, ncol = 2, byrow = TRUE)
View(test2)
test2a$conf.int
test2 <- matrix(c(test2a$p.value, test2b$p.value, test2c$p.value,
test2a$conf.int, test2a$conf.int, test2a$conf.int),
nrow = 3, ncol = 3)
test1
test2
test2 <- matrix(c(test2a$p.value, test2a$conf.int,
test2b$p.value, test2a$conf.int,
test2c$p.value, test2a$conf.int),
nrow = 3, ncol = 3, by.row = TRUE)
test2 <- matrix(c(test2a$p.value, test2a$conf.int,
test2b$p.value, test2a$conf.int,
test2c$p.value, test2a$conf.int),
nrow = 3, ncol = 3, byrow = TRUE)
test2
test2 <- data.frame(matrix(c(test2a$p.value, test2a$conf.int,
test2b$p.value, test2b$conf.int,
test2c$p.value, test2c$conf.int),
nrow = 3, ncol = 3, byrow = TRUE),
row.names = c("comparison 1 & 2", "comparison 1 & 3",
"comparison 2 & 3"),
col.names = c("p-values", "confidence.interval.lower",
"confidence.interval.upper"))
test2
?data.frame
test2 <- as.data.frame(matrix(c(test2a$p.value, test2a$conf.int,
test2b$p.value, test2b$conf.int,
test2c$p.value, test2c$conf.int),
nrow = 3, ncol = 3, byrow = TRUE),
row.names = c("comparison 1 & 2", "comparison 1 & 3",
"comparison 2 & 3"),
col.names = c("p-values", "confidence.interval.lower",
"confidence.interval.upper"))
test2
test2 <- data.frame(p-value = c(test2a$p.value, test2b$p.value, test2c$p.value),
confidence.interval = c(test2a$conf.int,
test2b$conf.int,
test2c$conf.int),
row.names = c("comparison 1 & 2", "comparison 1 & 3",
"comparison 2 & 3"))
test2 <- data.frame(p-value = c(test2a$p.value, test2b$p.value, test2c$p.value),
confidence.interval = c(test2a$conf.int,
test2b$conf.int,
test2c$conf.int))
test2 <- data.frame(p-value = c(test2a$p.value, test2b$p.value, test2c$p.value),
confidence.interval.lower = c(test2a$conf.int[,1],
test2b$conf.int[,1],
test2c$conf.int[,1]),
confidence.interval.upper = c(test2a$conf.int[,2],
test2b$conf.int[,2],
test2c$conf.int[,2]),
row.names = c("comparison 1 & 2", "comparison 1 & 3",
"comparison 2 & 3"))
data.frame(a = c(1,2), b = c(2,3))
test2 <- data.frame(p-value = c(test2a$p.value, test2b$p.value, test2c$p.value))
test2 <- data.frame(p.value = c(test2a$p.value, test2b$p.value, test2c$p.value))
test2 <- data.frame(p.value = c(test2a$p.value, test2b$p.value, test2c$p.value),
confidence.interval.lower = c(test2a$conf.int[,1],
test2b$conf.int[,1],
test2c$conf.int[,1]),
confidence.interval.upper = c(test2a$conf.int[,2],
test2b$conf.int[,2],
test2c$conf.int[,2]),
row.names = c("comparison 1 & 2", "comparison 1 & 3",
"comparison 2 & 3"))
test2a$conf.int[,1]
test2a$conf.int
test2a$conf.int[1]
test2a$conf.int[2]
test2 <- data.frame(p.value = c(test2a$p.value, test2b$p.value, test2c$p.value),
confidence.interval.lower = c(test2a$conf.int[1],
test2b$conf.int[1],
test2c$conf.int[1]),
confidence.interval.upper = c(test2a$conf.int[2],
test2b$conf.int[2],
test2c$conf.int[2]),
row.names = c("comparison 1 & 2", "comparison 1 & 3",
"comparison 2 & 3"))
test2
test2 <- data.frame(p.value = c(test2a$p.value, test2b$p.value, test2c$p.value),
confidence.interval.lower = c(test2a$conf.int[1],
test2b$conf.int[1],
test2c$conf.int[1]),
confidence.interval.upper = c(test2a$conf.int[2],
test2b$conf.int[2],
test2c$conf.int[2]),
row.names = c("Test A", "Test B", "Test C"))
test2
test2 <- data.frame(p.value = c(test2a$p.value, test2b$p.value, test2c$p.value),
conf.int.lower = c(test2a$conf.int[1],
test2b$conf.int[1],
test2c$conf.int[1]),
conf.int.upper = c(test2a$conf.int[2],
test2b$conf.int[2],
test2c$conf.int[2]),
row.names = c("Test A", "Test B", "Test C"))
test2
test2[1,3]
View(test2)
test2[1,1]
options(scipen = 9)
