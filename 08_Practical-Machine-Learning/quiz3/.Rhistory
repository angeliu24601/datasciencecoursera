## 1.-----------------------------------------------------------------------
## Load the cell segmentation data from the AppliedPredictiveModeling package
## using the commands:
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
colnames(segmentationOriginal)
segmentationOriginal$Case
## 1. Subset the data to a training set and testing set based on the Case
## variable in the data set.
## 2. Set the seed to 125 and fit a CART model to predict Class with the rpart
## method using all predictor variables and default caret settings.
## 3. In the final model what would be the final model prediction for cases
##  with the following variable values:
##   a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
##   b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
##   c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
##   d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2##
train <- segmentationOriginal[segmentationOriginal$Case == "train",]
## 1. Subset the data to a training set and testing set based on the Case
## variable in the data set.
## 2. Set the seed to 125 and fit a CART model to predict Class with the rpart
## method using all predictor variables and default caret settings.
## 3. In the final model what would be the final model prediction for cases
##  with the following variable values:
##   a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
##   b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
##   c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
##   d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2##
train <- segmentationOriginal[segmentationOriginal$Case == "Train",]
train <- segmentationOriginal[segmentationOriginal$Case == "Test",]
test <- segmentationOriginal[segmentationOriginal$Case == "Test",]
## 1. Subset the data to a training set and testing set based on the Case
## variable in the data set.
## 2. Set the seed to 125 and fit a CART model to predict Class with the rpart
## method using all predictor variables and default caret settings.
## 3. In the final model what would be the final model prediction for cases
##  with the following variable values:
##   a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
##   b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
##   c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
##   d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2##
train <- segmentationOriginal[segmentationOriginal$Case == "Train",]
### 2. Set the seed to 125 and fit a CART model to predict Class with the rpart
### method using all predictor variables and default caret settings.
set.seed(125)
?train
mcart <- train(Class ~ ., method = "rpart")
mcart <- train(data = train, Class ~ ., method = "rpart")
plot(mcart)
View(mcart)
library(tidyverse)
### 3. In the final model what would be the final model prediction for cases
###  with the following variable values:
###   a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
###   b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
###   c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
###   d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2##
pred.a <- segmentationOriginal %>%
filter(TotalIntench2 == 23000, FiberWidthCh1 == 10, PerimStatusCh1 == 2)
### 3. In the final model what would be the final model prediction for cases
###  with the following variable values:
###   a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
###   b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
###   c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
###   d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2##
pred.a <- segmentationOriginal %>%
filter(TotalIntenCh2 == 23000, FiberWidthCh1 == 10, PerimStatusCh1 == 2)
View(pred.a)
mcart$finalModel
plot(mcart$finalModel)
text(mcart$finalModel)
prp(mcart$finalModel)
rpart::prp(mcart$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
rpart::prp(mcart$finalModel)
rpart.plot::prp(mcart$finalModel)
install.packages("rpart.plot")
rpart.plot::prp(mcart$finalModel)
45E+3
rm(list = ls())
## 3.--------------------------------------------------------------------------
## Load the olive oil data using the commands:
library(pgmm)
data(olive)
install.packages("pgmm")
## 3.--------------------------------------------------------------------------
## Load the olive oil data using the commands:
library(pgmm)
data(olive)
olive = olive[,-1]
## These data contain information on 572 different Italian olive oils from
## multiple regions in Italy. Fit a classification tree where Area is the
## outcome variable. Then predict the value of area for the following data frame
##  using the tree command with all defaults
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
model <- train(data = olive, Area ~., method = "rpart")
## 3.--------------------------------------------------------------------------
library(caret)
model <- train(data = olive, Area ~., method = "rpart")
predict(modolive, newdata = newdata)
predict(model, newdata = newdata)
rm(list=ls())
## 4.--------------------------------------------------------------------------
## Load the South Africa Heart Disease Data and create training and test sets
## with the following code:
library(ElemStatLearn)
install.packages("ElemStatLearn")
## 4.--------------------------------------------------------------------------
## Load the South Africa Heart Disease Data and create training and test sets
## with the following code:
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
## What is the misclassification rate on the training set? What is the
## misclassification rate on the test set?
set.seed(13234)
?train
colnames(SAheart)
train(data = trainSA, method = "glm", family = "binomial",
chd ~ age + alcoho + obesity + tobacco + typea + ldl)
train(data = trainSA, method = "glm", family = "binomial",
chd ~ age + alcohol + obesity + tobacco + typea + ldl)
trainSA <- mutate(trainSA, chd = factor(chd))
library(tidyverse)
trainSA <- mutate(trainSA, chd = factor(chd))
trainSA
count(trainSA, chd)
train(data = trainSA, method = "glm", family = "binomial",
chd ~ age + alcohol + obesity + tobacco + typea + ldl)
model <- train(data = trainSA, method = "glm", family = "binomial",
chd ~ age + alcohol + obesity + tobacco + typea + ldl)
## Then set the seed to 13234 and fit a logistic regression model
## (method="glm", be sure to specify family="binomial") with Coronary Heart
## Disease (chd) as the outcome and age at onset, current alcohol consumption,
## obesity levels, cumulative tabacco, type-A behavior, and low density
## lipoprotein cholesterol as predictors. Calculate the misclassification rate
## for your model using this function and a prediction on the "response" scale:
missClass = function(values,prediction){sum(((prediction > 0.5)*1) !=
values)/length(values)}
missClass(trainSA$chd, predict(model, newdata = trainSA))
missClass(as.numeric(trainSA$chd), predict(model, newdata = trainSA))
trainSA = SAheart[train,]
missClass(trainSA$chd, predict(model, newdata = trainSA))
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
## Then set the seed to 13234 and fit a logistic regression model
## (method="glm", be sure to specify family="binomial") with Coronary Heart
## Disease (chd) as the outcome and age at onset, current alcohol consumption,
## obesity levels, cumulative tabacco, type-A behavior, and low density
## lipoprotein cholesterol as predictors. Calculate the misclassification rate
## for your model using this function and a prediction on the "response" scale:
missClass = function(values,prediction){sum(((prediction > 0.5)*1) !=
values)/length(values)}
## What is the misclassification rate on the training set? What is the
## misclassification rate on the test set?
set.seed(13234)
model <- train(data = trainSA, method = "glm", family = "binomial",
chd ~ age + alcohol + obesity + tobacco + typea + ldl)
missClass(trainSA$chd, predict(model, newdata = trainSA))
missClass(testSA$chd, predict(model, newdata = testSA))
rm(list=ls())
## 5.---------------------------------------------------------------------------
## Load the vowel.train and vowel.test data sets:
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test <- mutate(vowel.test, y = factor(y))
vowel.train <- mutate(vowel.train, y = factor(y))
set.seed(33833)
?randomForest
library(randomForest)
install.packages("randomForest")
data(vowel.train)
## 5.---------------------------------------------------------------------------
## Load the vowel.train and vowel.test data sets:
library(ElemStatLearn)
library(randomForest)
data(vowel.train)
data(vowel.test)
vowel.test <- mutate(vowel.test, y = factor(y))
vowel.train <- mutate(vowel.train, y = factor(y))
set.seed(33833)
?randomForest()
model <- randomForest(y ~., )
model <- randomForest(y ~., data = vowel.train)
?varImp()
varImp(model)
varImp(model, sort = TRUE)
varImp.randomForest(model)
varImp(model)
sort(varImp(model))
t <- varImp(model)
sort(t)
sort(t$Overall)
sort(t, Overall)
?sort
sort(t, Overall)
sort(t, "Overall")
t <- varImp(model) %>%
arrange(Overall)
t
t <- varImp(model) %>%
rownames_to_column() %>%
arrange(Overall)
t
t <- varImp(model) %>%
rownames_to_column() %>%
arrange(desc(Overall))
t
